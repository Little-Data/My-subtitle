[Script Info]
; Script generated by Aegisub 9706-cibuilds-20caaabc0
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
YCbCr Matrix: TV.709
PlayResX: 3840
PlayResY: 2160

[Aegisub Project Garbage]
Last Style Storage: Default
Audio File: Why.mkv
Video File: Why.mkv
Video AR Mode: 4
Video AR Value: 1.777778
Video Zoom Percent: 0.625000
Scroll Position: 25
Active Line: 39
Video Position: 36313

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Enderman-CN,思源黑体 CN Normal,110,&H0000EAFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,1.8,1.3,2,10,10,30,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Dialogue: 0,0:00:00.03,0:00:06.73,Enderman-CN,,0,0,0,,{\fs160\fad(200,200)\b1\c&HFFFFFF&\pos(1899.2,645.2)}这个视频不以任何形式、方式或形态纵容或推广盗版
Dialogue: 0,0:00:00.03,0:00:06.73,Enderman-CN,,0,0,0,,{\fs160\fad(200,200)\b1\c&HFFFFFF&\pos(1896,1869.2)}您必须拥有合法的Windows 98副本才能进行视频中的操作\N本视频由专业人员制作，仅供教育目的使用
Dialogue: 0,0:00:06.98,0:00:14.14,Enderman-CN,,0,0,0,,{\fad(200,200)}翻译/压制/字幕制作：HAF半个水果
Dialogue: 0,0:00:14.96,0:00:18.78,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1913.6,2072.4)}通过修改2字节数据来激活Windows 98
Dialogue: 0,0:00:19.24,0:00:29.69,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1910.4,1829.2)}大家好！今天我将向你们展示Windows 98许可算法的真正实力
Dialogue: 0,0:00:19.24,0:00:29.69,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1891.2,2090)}简而言之，如果你懂一点汇编语言，产品密钥就变得可有可无了
Dialogue: 0,0:00:30.29,0:00:39.85,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1912,1822.8)}Windows 98的许可证密钥算法早在很久以前就被破解了
Dialogue: 0,0:00:30.29,0:00:39.85,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1921.6,2093.2)}事实上，它与Windows XP的非服务器版本的算法完全相同
Dialogue: 0,0:00:40.37,0:00:49.39,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1969.6,1818)}我已经制作了第一部分，解释了Windows XP激活算法的基础知识，所以请继续观看
Dialogue: 0,0:00:40.37,0:00:49.39,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1936,2090)}我还需要完成第二部分和第三部分，很快就会推出
Dialogue: 0,0:00:49.93,0:00:59.20,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1939.2,1819.6)}与此同时，我们将专注于以最小的努力激活Windows 98
Dialogue: 0,0:00:49.93,0:00:59.20,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1929.6,2101.2)}这意味着我们可以欺骗或完全避开许可算法。不出所料，这相当简单
Dialogue: 0,0:00:59.92,0:01:11.26,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1940.8,1827.6)}正如标题所说，我们只需修补2个字节即可打破算法，使其接受几乎任何输入
Dialogue: 0,0:00:59.92,0:01:11.26,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(2276.8,2102.8)}修补意味着直接修改可执行文件的数据
Dialogue: 0,0:01:19.66,0:01:30.23,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1998.4,1822.8)}好的，我们终于完成了Windows 98的安装。启用Hyper-V后，它的速度慢了很多
Dialogue: 0,0:01:19.66,0:01:30.23,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1963.2,2107.6)}让我们先验证一下，不能输入任何随机内容来激活产品
Dialogue: 0,0:01:30.57,0:01:31.40,Enderman-CN,,0,0,0,,{\c&H000000&\fscx85\fscy81\pos(3187.2,1389.2)}iliBili
Dialogue: 0,0:01:32.02,0:01:42.36,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1953.6,1826)}嗯，正如你所见，即使使用有效的Base24字母表的产品密钥，我们也无法通过
Dialogue: 0,0:01:32.02,0:01:42.36,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1932.8,2090)}是时候解决这个问题了。Windows 98命令提示符模式可以在不激活的情况下使用
Dialogue: 0,0:01:43.88,0:01:44.96,Enderman-CN,,0,0,0,,{\c&H000000&\fscx85\fscy81\pos(3195.2,1389.2)}kitty
Dialogue: 0,0:01:57.59,0:02:09.62,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1926.4,451.6)}我们正在寻找的文件是PIDGEN.dll，代表“产品ID生成器”。产品密钥验证机制就存在于该文件中
Dialogue: 0,0:02:11.74,0:02:24.30,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1902.4,466)}我们简单粗暴一点。如果完全删除PIDGEN会发生什么？
Dialogue: 0,0:02:25.04,0:02:36.07,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1902.4,466)}我确保我们有一个备份副本，这样我们以后还有机会进入系统...当然，那不会起作用，对吧？ #UwU#
Dialogue: 0,0:02:41.52,0:02:44.52,Enderman-CN,,0,0,0,,{\pos(2198.4,1805.2)}在 X 上关注enderman!
Dialogue: 0,0:02:48.31,0:02:55.73,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(2024,1822.8)}嘿，至少微软的那些家伙通过了最愚蠢的检查。因此，需要进行修补工作。现在就开始吧
Dialogue: 0,0:02:56.37,0:03:08.75,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1961.6,174.8)}我将恢复那个PIDGEN的副本，然后使用一个简单的DOS十六进制编辑器对其进行一些魔改
Dialogue: 0,0:02:56.37,0:03:08.75,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1852.8,456.4)}虽然可以使用DEBUG工具来完成，但它不那么直观
Dialogue: 0,0:03:16.47,0:03:24.88,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1856,1811.6)}这就是在十六进制编辑器中看到的可执行文件的样子
Dialogue: 0,0:03:16.47,0:03:24.88,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1838.4,2109.2)}你看到的是MZ头，后面跟着DOS块。这定义了Windows中的可执行文件
Dialogue: 0,0:03:26.67,0:03:40.70,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1840,165.2)}是的，PIDGEN中也有那个熟悉的“BINK”字符串
Dialogue: 0,0:03:26.67,0:03:40.70,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1880,451.6)}简而言之，这意味着“二进制密钥”。BINK资源定义了一个包含椭圆曲线参数的结构：p, a, b, G(x; y), K(x; y)
Dialogue: 0,0:03:44.02,0:04:01.03,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1880,467.6)}我们需要在偏移量分别为0x1DD7和0x1DDF的位置修补两个字节。稍后我会展示这在验证过程中所起的作用
Dialogue: 0,0:04:01.72,0:04:11.28,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1880,467.6)}这两个字节的值都是0x39，需要将其改为0x8B。稍后我会解释原因。现在我们先进行修改
Dialogue: 0,0:04:24.94,0:04:36.90,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1937.6,1819.6)}我们通过仅仅改变这两个字节就破坏了验证机制。就是这么简单。让我们看看这在安装向导中是如何体现的
Dialogue: 0,0:04:56.01,0:05:05.03,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1937.6,1819.6)}我们成功了。这就是字节修补的魔力。通过混淆和虚拟化
Dialogue: 0,0:04:56.01,0:05:05.03,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1945.6,2096.4)}这一切都可以变得更加困难。不过，我不确定当时是否有可能实现后者
Dialogue: 0,0:05:11.62,0:05:25.73,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1947.2,1843.6)}现在可以在产品密钥框中插入除破折号以外的任何字符，并且可以逃脱检查
Dialogue: 0,0:05:11.62,0:05:25.73,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1956.8,2106)}插入破折号可能会导致长度检查失败，因为它们充当分隔符
Dialogue: 0,0:05:36.53,0:05:48.39,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1932.8,1818)}让我现在解释一下为什么这行得通。PIDGEN的副本被压缩并存储在Windows 98镜像中的PRECOPY1.CAB文件中
Dialogue: 0,0:05:53.83,0:06:06.76,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1932.8,1818)}我们将通过反汇编器运行它，以查看更易理解的字节码格式
Dialogue: 0,0:05:53.83,0:06:06.76,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1912,2106)}反汇编器允许查看和图形化任何可执行文件的控制流程
Dialogue: 0,0:06:09.83,0:06:22.87,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1929.6,1818)}由于网上没有这个版本的PIDGEN调试符号，而且我也不想费心去逆向工程它
Dialogue: 0,0:06:09.83,0:06:22.87,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1934.4,2094.8)}所以我只会瞄准已知的偏移量。我知道这很不专业，但就这样吧 ( ◠‿◠ )
Dialogue: 0,0:06:26.44,0:06:41.04,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1934.4,2094.8)}找到了！这就是验证过程，基址是0x182A。这个过程包含两个我们必须修补的特定操作
Dialogue: 0,0:06:46.82,0:06:58.91,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1932.8,1837.2)}在过程的末尾是修补应用的地方。在我之前已经有人这样做过了
Dialogue: 0,0:06:46.82,0:06:58.91,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1932.8,2093.2)}所以这不能作为客观原因的通用规则。每个过程都需要单独的方法
Dialogue: 0,0:07:00.11,0:07:10.09,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1966.4,1826)}这里是两个正在被修补的比较操作。它们使用了CMP助记符和0x39字节码
Dialogue: 0,0:07:00.80,0:07:09.41,Enderman-CN,,0,0,0,,{\pos(2113.6,405.2)}x86指令集参考
Dialogue: 0,0:07:11.16,0:07:21.70,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1966.4,1826)}我们将它们修补为0x8B，即使用MOV助记符的移动操作。你将能够在反汇编器中实时查看我修补这些字节
Dialogue: 0,0:07:56.70,0:08:07.71,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1966.4,1826)}这样我们就可以在不执行比较操作的情况下将值分配给寄存器ax和dx。这非常优雅，而且只占用2个字节
Dialogue: 0,0:08:15.69,0:08:27.98,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1966.4,1826)}我认为这已经是最优的解决方案了，但我可以提供一些我的见解
Dialogue: 0,0:08:15.69,0:08:27.98,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1937.6,2104.4)}另一种打破验证的方法是通过交换JZ（= 0）和JNZ（≠ 0）检查
Dialogue: 0,0:08:31.34,0:08:44.40,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1875.2,178)}我看到的这种方法的唯一问题是它会丢弃任何有效的密钥
Dialogue: 0,0:08:31.34,0:08:44.40,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1889.6,462.8)}但它仍然可以将无效的密钥作为有效密钥传递...  ;) 让我们试试看！
Dialogue: 0,0:08:56.11,0:09:13.36,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1915.2,1818)}果不其然，它确实有效。让我们尝试一个有效的密钥！我将使用XPKeygen生成一个完全有效的密钥
Dialogue: 0,0:09:26.69,0:09:48.30,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1915.2,1818)}是的，那个东西确实会丢弃有效的密钥
Dialogue: 0,0:09:26.69,0:09:48.30,Enderman-CN,,0,0,0,,{\fs105\fad(200,200)\pos(1913.6,2107.6)}想象一下，如果这是一个在公司的恶作剧，一个系统管理员一身反骨，决定在OEM副本的PIDGEN中修补2个字节...
Dialogue: 0,0:09:57.32,0:10:06.46,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1940.8,1813.2)}是的，制作这个视频非常有趣。我真的很享受。希望你也喜欢。谢谢观看！别忘了你的汇编课程 (｡◝‿◜｡)
Dialogue: 0,0:10:07.35,0:10:19.69,Enderman-CN,,0,0,0,,{\fs95\fad(200,200)\pos(1924.8,1792.4)}给视频评分并分享给朋友，记住，（啊吧￥%%&@#啊吧歪比ba布%……E￥）也是Windows 98的有效密钥，前提是你懂一点汇编
Dialogue: 0,0:09:59.46,0:10:04.46,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1891.2,314)}原标题：Why #UwU*-TEST1-{{{';-//*&-`^|^? can be a valid Windows 98 key  原作者：Enderman
Dialogue: 0,0:10:04.85,0:10:07.85,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1891.2,314)}原视频上传日期：2024年11月7日
Dialogue: 0,0:10:20.28,0:10:39.76,Enderman-CN,,0,0,0,,{\fad(200,200)\fscx243\fscy245\pos(1888.87,756.47)}在 Youtube 上关注
Dialogue: 0,0:10:21.23,0:10:26.23,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1871.22,1153.28)}翻译/压制/字幕制作：HAF半个水果
Dialogue: 0,0:10:26.67,0:10:31.67,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1912.42,1186.08)}向所有字幕制作及相关人员道一声辛苦了 (*ˊᗜˋ*)/ᵗᑋᵃᐢᵏ ᵞᵒᵘ*\N感谢字幕组的默默耕耘，你们的每一行字都能让更多人能够跨越语言障碍，享受精彩的内容
Dialogue: 0,0:10:32.01,0:10:37.01,Enderman-CN,,0,0,0,,{\fad(200,200)\pos(1912.42,1186.08)}字幕制作不易，喜欢的话支持一下我吧！
